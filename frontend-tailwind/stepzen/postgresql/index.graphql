type Category {
  created_at: DateTime
  id: ID!
  name: String
  postList: [Post] @materializer(query: "getPostUsingCategory_id")
}

type Comment {
  body: String
  created_at: DateTime
  id: ID!
  post: Post
    @materializer(
      query: "getPost"
      arguments: [{ name: "id", field: "post_id" }]
    )
  post_id: ID
  user: User
    @materializer(
      query: "getUser"
      arguments: [{ name: "id", field: "user_id" }]
    )
  user_id: ID
}

type Post {
  body: String
  category: Category
    @materializer(
      query: "getCategory"
      arguments: [{ name: "id", field: "category_id" }]
    )
  category_id: ID
  commentList: [Comment] @materializer(query: "getCommentUsingPost_id")
  created_at: DateTime
  id: ID!
  image: String
  title: String
  user: User
    @materializer(
      query: "getUser"
      arguments: [{ name: "id", field: "user_id" }]
    )
  user_id: ID
}

type User {
  commentList: [Comment] @materializer(query: "getCommentUsingUser_id")
  created_at: DateTime
  id: ID!
  postList: [Post] @materializer(query: "getPostUsingUser_id")
  profile_pic: String
  username: String
}

"""
These are some examples of queries generated from the schema. Feel free to modify them or add your own.
"""
type Query {
  getCategoryList: [Category]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "category"
      configuration: "postgresql_config"
    )
  getCategory(id: ID!): Category
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "category"
      configuration: "postgresql_config"
    )
  getCategoryByName(name: String!): Category
    @dbquery(
      type: "postgresql"
      query: """
        select * from "category" where "name" = $1
      """
      configuration: "postgresql_config"
    )
  getPostUsingCategory_id(id: ID!): [Post]
    @dbquery(
      type: "postgresql"
      query: """
      SELECT T."body", T."category_id", T."created_at", T."id", T."image", T."title", T."user_id"
        FROM "public"."post" T
        WHERE T."category_id" = $1
      """
      configuration: "postgresql_config"
    )
  getCommentList: [Comment]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      configuration: "postgresql_config"
    )
  getComment(id: ID!): Comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      configuration: "postgresql_config"
    )
  getPostList: [Post]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      configuration: "postgresql_config"
    )
  getPost(id: ID!): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      configuration: "postgresql_config"
    )
  getCommentUsingPost_id(id: ID!): [Comment]
    @dbquery(
      type: "postgresql"
      query: """
      SELECT T."body", T."created_at", T."id", T."post_id", T."user_id"
        FROM "public"."comment" T
        WHERE T."post_id" = $1
      """
      configuration: "postgresql_config"
    )
  getUserList: [User]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "user"
      configuration: "postgresql_config"
    )
  getUser(id: ID!): User
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "user"
      configuration: "postgresql_config"
    )
  getCommentUsingUser_id(id: ID!): [Comment]
    @dbquery(
      type: "postgresql"
      query: """
      SELECT T."body", T."created_at", T."id", T."post_id", T."user_id"
        FROM "public"."comment" T
        WHERE T."user_id" = $1
      """
      configuration: "postgresql_config"
    )
  getPostUsingUser_id(id: ID!): [Post]
    @dbquery(
      type: "postgresql"
      query: """
      SELECT T."body", T."category_id", T."created_at", T."id", T."image", T."title", T."user_id"
        FROM "public"."post" T
        WHERE T."user_id" = $1
      """
      configuration: "postgresql_config"
    )
}

"""
These are some examples of mutations generated from the schema. Feel free to modify them or add your own.
"""
type Mutation {
  insertCategory(name: String!): Category
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "category"
      dml: INSERT
      configuration: "postgresql_config"
    )
  deleteCategory(id: ID!): Category
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "category"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertComment(
    post_id: ID!
    created_at: DateTime!
    body: String!
    user_id: ID!
  ): Comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      dml: INSERT
      configuration: "postgresql_config"
    )
  deleteComment(id: ID!): Comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertPost(
    image: String!
    body: String!
    category_id: ID!
    title: String!
    user_id: ID!
  ): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      dml: INSERT
      configuration: "postgresql_config"
    )
  deletePost(id: ID!): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertUser(
    created_at: DateTime!
    username: String!
    profile_pic: String!
  ): User
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "user"
      dml: INSERT
      configuration: "postgresql_config"
    )
  deleteUser(id: ID!): User
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "user"
      dml: DELETE
      configuration: "postgresql_config"
    )
}
